// Zipli Service Worker for Basic Offline Functionality
const CACHE_NAME = 'zipli-v1';
const OFFLINE_CACHE = 'zipli-offline-v1';

// Essential files to cache for offline functionality
const ESSENTIAL_FILES = [
  '/',
  '/offline',
  '/auth/login',
  '/_next/static/css/app.css', // Will be generated by Next.js
  '/_next/static/chunks/main.js', // Will be generated by Next.js
];

// API endpoints that should be cached
const CACHEABLE_APIS = ['/api/health'];

// Install event - cache essential files
self.addEventListener('install', (event) => {
  console.log('Service Worker installing...');

  event.waitUntil(
    caches
      .open(CACHE_NAME)
      .then((cache) => {
        console.log('Caching essential files');
        return cache.addAll(ESSENTIAL_FILES.filter(Boolean));
      })
      .catch((error) => {
        console.error('Failed to cache essential files:', error);
      })
  );

  self.skipWaiting();
});

// Activate event - clean up old caches
self.addEventListener('activate', (event) => {
  console.log('Service Worker activating...');

  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== CACHE_NAME && cacheName !== OFFLINE_CACHE) {
            console.log('Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
  );

  self.clients.claim();
});

// Fetch event - handle offline requests
self.addEventListener('fetch', (event) => {
  const { request } = event;
  const url = new URL(request.url);

  // Only handle GET requests
  if (request.method !== 'GET') return;

  // Handle API requests
  if (url.pathname.startsWith('/api/')) {
    event.respondWith(handleApiRequest(request));
    return;
  }

  // Handle page requests
  if (request.mode === 'navigate') {
    event.respondWith(handlePageRequest(request));
    return;
  }

  // Handle static assets
  event.respondWith(handleAssetRequest(request));
});

async function handleApiRequest(request) {
  const url = new URL(request.url);

  try {
    // Try network first
    const response = await fetch(request);

    // Cache successful responses for certain endpoints
    if (
      response.ok &&
      CACHEABLE_APIS.some((api) => url.pathname.startsWith(api))
    ) {
      const cache = await caches.open(OFFLINE_CACHE);
      cache.put(request, response.clone());
    }

    return response;
  } catch (error) {
    // Try cache for cacheable APIs
    if (CACHEABLE_APIS.some((api) => url.pathname.startsWith(api))) {
      const cache = await caches.open(OFFLINE_CACHE);
      const cached = await cache.match(request);
      if (cached) {
        return cached;
      }
    }

    // Return offline API response
    return new Response(
      JSON.stringify({
        error: 'Offline',
        message: 'This feature is not available offline',
      }),
      {
        status: 503,
        statusText: 'Service Unavailable',
        headers: { 'Content-Type': 'application/json' },
      }
    );
  }
}

async function handlePageRequest(request) {
  try {
    // Try network first
    const response = await fetch(request);

    // Cache successful page responses
    if (response.ok) {
      const cache = await caches.open(CACHE_NAME);
      cache.put(request, response.clone());
    }

    return response;
  } catch (error) {
    // Try cache
    const cache = await caches.open(CACHE_NAME);
    const cached = await cache.match(request);
    if (cached) {
      return cached;
    }

    // Return offline page
    return (
      caches.match('/offline') ||
      new Response(createOfflinePage(), {
        headers: { 'Content-Type': 'text/html' },
      })
    );
  }
}

async function handleAssetRequest(request) {
  try {
    // Try cache first for assets
    const cache = await caches.open(CACHE_NAME);
    const cached = await cache.match(request);
    if (cached) {
      return cached;
    }

    // Then try network
    const response = await fetch(request);

    // Cache successful responses
    if (response.ok) {
      cache.put(request, response.clone());
    }

    return response;
  } catch (error) {
    // For images, return a placeholder
    if (request.destination === 'image') {
      return new Response(createPlaceholderSVG(), {
        headers: { 'Content-Type': 'image/svg+xml' },
      });
    }

    throw error;
  }
}

function createOfflinePage() {
  return `
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <title>Zipli - Offline</title>
      <style>
        body {
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
          margin: 0;
          padding: 2rem;
          background: #f5f9ef;
          color: #021d13;
          text-align: center;
          min-height: 100vh;
          display: flex;
          align-items: center;
          justify-content: center;
          flex-direction: column;
        }
        .container {
          max-width: 400px;
        }
        h1 {
          color: #024209;
          margin-bottom: 1rem;
        }
        .icon {
          width: 64px;
          height: 64px;
          margin: 0 auto 2rem;
          background: #024209;
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          color: white;
          font-size: 24px;
        }
        button {
          background: #024209;
          color: white;
          border: none;
          padding: 12px 24px;
          border-radius: 6px;
          cursor: pointer;
          font-size: 16px;
          margin-top: 1rem;
        }
        button:hover {
          background: #021d13;
        }
      </style>
    </head>
    <body>
      <div class="container">
        <div class="icon">ðŸ“±</div>
        <h1>You're Offline</h1>
        <p>Some features are not available without an internet connection. Please check your connection and try again.</p>
        <button onclick="window.location.reload()">Try Again</button>
      </div>
    </body>
    </html>
  `;
}

function createPlaceholderSVG() {
  return `
    <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">
      <rect width="200" height="200" fill="#f5f9ef"/>
      <circle cx="100" cy="100" r="30" fill="#024209"/>
      <text x="100" y="140" text-anchor="middle" fill="#021d13" font-family="Arial" font-size="12">Image unavailable offline</text>
    </svg>
  `;
}

// Handle messages from the main thread
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});
